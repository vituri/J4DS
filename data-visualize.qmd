# Data visualization

## Introduction

```{julia}
using PalmerPenguins, DataFrames
using AlgebraOfGraphics, CairoMakie
import AlgebraOfGraphics.density
using TidierData, TidierPlots
using Pipe: @pipe
axis = (width = 1000, height = 600)
```

```{julia}
penguins = dropmissing(DataFrame(PalmerPenguins.load()))
first(penguins, 6)
```


```{julia}
describe(penguins)
```

## First steps

::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp = data(penguins) * 
  mapping(:flipper_length_mm, :body_mass_g)
draw(pp; axis = axis)
```

## TidierPlots

```{julia}
@ggplot(data = penguins) + 
    @geom_point(aes(x = flipper_length_mm, y = body_mass_g));
```

:::


::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp2 = pp * mapping(color = :species)
draw(pp2; axis = axis)
```


## TidierPlots

```{julia}
@ggplot(
  penguins,
  aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  @geom_point();
```

:::



::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
layers = linear() + mapping()
pp2 = pp * layers * mapping(color = :species)
draw(pp2; axis = axis)
```

## TidierPlots
```{julia}
@ggplot(
  penguins,
  aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  @geom_point() + 
  @geom_smooth(method = "lm");
```

:::


::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp2 = pp * 
  mapping(color = :species) + 
  pp * linear()
draw(pp2; axis = axis)
```

## TidierPlots

```{julia}
@ggplot(
  penguins,
  aes(x = flipper_length_mm, y = body_mass_g)
) +
  @geom_point(aes(color = species)) + 
  @geom_smooth(method = "lm");
```

:::



::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics
```{julia}
pp2 = pp * 
  mapping(color = :species, marker = :species) + 
  pp * linear()
draw(pp2; axis = axis)
```

## TidierPlots

```{julia}
@ggplot(
  penguins,
  aes(x = flipper_length_mm, y = body_mass_g)
) +
  @geom_point(aes(color = species, shape = species)) + 
  @geom_smooth(method = "lm");
```

:::



::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp2 = pp * 
  mapping(color = :species, marker = :species) + 
  pp * linear()
draw(pp2; axis = axis)
```

## TidierPlots

```{julia}
@ggplot(
  penguins,
  aes(x = flipper_length_mm, y = body_mass_g)
) +
  @geom_point(aes(color = species, shape = species)) + 
  @geom_smooth(method = "lm") + 
  @labs(     
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"  
  );
```

:::

## Visualizing distributions

::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp = data(penguins) * frequency() * mapping(:species)
draw(pp; axis = axis)
```

## TidierPlots

```{julia}
@ggplot(penguins, aes(x = species)) +
  @geom_bar();
```
:::

::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp = data(penguins) * density() * mapping(:body_mass_g)
draw(pp; axis = axis)
```

:::

## Visualizing relationships

### A numerical and a categorical variable

::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp = data(penguins) * mapping(:species, :body_mass_g) * visual(BoxPlot)
draw(pp; axis = axis)
```

## TidierPlots

```{julia}
@ggplot(penguins, aes(x = species, y = body_mass_g)) +
  @geom_boxplot();
```

:::


::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp = data(penguins) * mapping(:body_mass_g, color = :species) * density()
draw(pp; axis = axis)
```

## TidierPlots

```{julia}
# Not available yet.
```

:::



::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics
```{julia}
pp = data(penguins) * mapping(:body_mass_g, color = :species) * density() * visual(alpha = 0.5)
draw(pp; axis = axis)
```

## TidierPlots
```{julia}
# Not available yet.
```
:::


### Two categorical variables


::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics

```{julia}
pp = data(penguins) * 
  mapping(:island, color = :species, stack = :species) * 
  frequency()
draw(pp; axis = axis)
```

## TidierPlots

```{julia}
@ggplot(penguins, aes(x = island, fill = species)) +
  @geom_bar();
```
:::

### Two numerical variables


::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics
```{julia}
pp = data(penguins) * mapping(:flipper_length_mm, :body_mass_g)
draw(pp; axis = axis)
```


## TidierPlots

```{julia}
@ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  @geom_point();
```
:::

### Three or more variables

::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics
```{julia}
pp = data(penguins) * 
  mapping(:flipper_length_mm, :body_mass_g
  , color = :species, marker = :island)
draw(pp; axis = axis)
```


## TidierPlots

```{julia}
@ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  @geom_point(aes(color = species, shape = island));
```
:::


::: {.panel-tabset group="plot-library"}

## AlgebraOfGraphics
```{julia}
pp = data(penguins) * 
  mapping(:flipper_length_mm, :body_mass_g
  , color = :species, marker = :species
  , col = :island)
draw(pp; axis = axis)
```

## TidierPlots

```{julia}
# Not available yet.
```
:::


## Saving your plots

## Common problems

## Summary